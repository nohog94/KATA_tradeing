# .github/workflows/gemini-review.yml
name: Gemini Flash-Lite 기반 코드 리뷰

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # 1) 코드 가져오기
      - name: Checkout repo (fetch full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) GCP 서비스 계정 인증
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: "norse-appliance-462503-h4"
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          version: "latest"

      # 3) PR diff 추출
      - name: Generate PR diff
        id: diff
        run: |
          echo "DIFF<<EOF" >> $GITHUB_ENV
          git fetch origin $GITHUB_BASE_REF
          git diff origin/${GITHUB_BASE_REF}...HEAD -- >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 4) Gemini API 호출 (디버깅 추가)
      - name: Call Gemini Flash-Lite
        id: gemini
        run: |
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          
          # 요청 페이로드 생성
          cat > request.json <<EOF
          {
            "contents": [{
              "parts": [{
                "text": "다음 코드 변경사항을 리뷰해주세요:\n\n${{ toJson(env.DIFF) }}"
              }]
            }],
            "generationConfig": {
              "temperature": 0.2,
              "maxOutputTokens": 1000
            }
          }
          EOF
          
          echo "=== API 요청 페이로드 ==="
          cat request.json
          echo "========================"
          
          # API 호출
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://us-central1-aiplatform.googleapis.com/v1/projects/norse-appliance-462503-h4/locations/us-central1/publishers/google/models/gemini-2.0-flash-lite:generateContent" \
            -d @request.json)
          
          echo "=== API 응답 ==="
          echo "$RESPONSE"
          echo "================"
          
          # 응답을 환경변수에 저장
          echo "RESPONSE<<EOF" >> $GITHUB_ENV
          echo "$RESPONSE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 5) AI 리뷰 댓글 작성 (안전한 파싱 추가)
      - name: Post AI review comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const response = process.env.RESPONSE;
              console.log('Raw response:', response);
              
              const resp = JSON.parse(response);
              console.log('Parsed response:', JSON.stringify(resp, null, 2));
              
              let reviewText = '';
              
              // Gemini API 응답 구조 확인
              if (resp.candidates && resp.candidates[0] && resp.candidates[0].content && resp.candidates[0].content.parts && resp.candidates[0].content.parts[0]) {
                reviewText = resp.candidates[0].content.parts[0].text;
              } else if (resp.predictions && resp.predictions[0] && resp.predictions[0].content) {
                reviewText = resp.predictions[0].content;
              } else if (resp.error) {
                reviewText = `API 오류: ${resp.error.message || JSON.stringify(resp.error)}`;
              } else {
                reviewText = `예상치 못한 응답 구조입니다. 응답: ${JSON.stringify(resp)}`;
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### 🤖 AI 코드 리뷰 (Gemini Flash-Lite)\n\`\`\`text\n${reviewText}\n\`\`\``
              });
            } catch (error) {
              console.error('Error processing response:', error);
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### 🤖 AI 코드 리뷰 오류\n\`\`\`\n${error.message}\n\`\`\`\n\n원본 응답:\n\`\`\`\n${process.env.RESPONSE}\n\`\`\``
              });
            }
